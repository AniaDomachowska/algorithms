{"filter":false,"title":"UnitTests.cpp","tooltip":"/BFS/UnitTests.cpp","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":19},"action":"remove","lines":["#include \"stdafx.h\""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":3}],[{"start":{"row":7,"column":0},"end":{"row":54,"column":0},"action":"remove","lines":["vector<node*> GenerateGraph(std::string input, int numberOfNodes)","{","\tvector<node*> result;","\tnode** nodeList = new node*[numberOfNodes];","\tfor (int i = 0; i < numberOfNodes; i++)","\t{","\t\tnodeList[i] = static_cast<node*>(malloc(sizeof(node)));","\t\tnodeList[i]->number = i;","\t\tnodeList[i]->next = NULL;","\t}","","\tvector<string> lines;","\tstd::stringstream stringstream(input);","\tstd::string line;","","\twhile (std::getline(stringstream, line, '\\n')){","\t\tlines.push_back(line);","\t}","","\tfor (size_t i = 0; i < lines.size(); i++) {","\t\tstd::string edgeLine = lines[i];","","\t\tstd::string startString = edgeLine.substr(0, edgeLine.find(\" \"));","\t\tstd::string endString = edgeLine.substr(startString.length(), edgeLine.length());","","\t\tint startNodeNumber = atoi(startString.c_str());","\t\tint endNodeNumber = atoi(endString.c_str());","","\t\tnode* startNode = nodeList[startNodeNumber];","\t\tstartNode->number = startNodeNumber;","","\t\tnode* endNode = (node*)malloc(sizeof(node));","","\t\tendNode->number = endNodeNumber;","\t\tendNode->next = startNode->next;","","\t\tstartNode->next = endNode;","","\t\tnodeList[startNodeNumber] = startNode;","\t}","","\tfor (int i = 0; i < numberOfNodes; i++) {","\t\tresult.push_back(nodeList[i]);","\t}","","\treturn result;","}",""],"id":4}],[{"start":{"row":7,"column":0},"end":{"row":52,"column":1},"action":"insert","lines":["vector<node*> GenerateGraph(std::string input, int numberOfNodes)","{","\t","\tvector<node*> graph;","","","\tfor (int i = 0; i < numberOfNodes; i++)","\t{","\t\tnode* newNode = static_cast<node*>(malloc(sizeof(node)));","\t\tnewNode->number = i;","\t\tnewNode->next = NULL;","\t\tgraph.push_back(newNode);","\t}","","\tvector<string> lines;","\tstd::stringstream stringstream(input);","\tstd::string line;","","\twhile (std::getline(stringstream, line, '\\n')){","\t\tlines.push_back(line);","\t}","","\tfor (size_t i = 0; i < lines.size(); i++) {","\t\tstd::string edgeLine = lines[i];","","\t\tstd::string startString = edgeLine.substr(0, edgeLine.find(\" \"));","\t\tstd::string endString = edgeLine.substr(startString.length(), edgeLine.length());","","\t\tint startNodeNumber = atoi(startString.c_str());","\t\tint endNodeNumber = atoi(endString.c_str());","","\t\tnode* startNode = graph[startNodeNumber];","\t\tstartNode->number = startNodeNumber;","","\t\tnode* endNode = graph[endNodeNumber];","","\t\tendNode->number = endNodeNumber;","\t\tendNode->next = startNode->next;","","\t\tstartNode->next = endNode;","","\t\tgraph[startNodeNumber] = startNode;","\t}","","\treturn graph;","}"],"id":5}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":10,"column":21},"end":{"row":10,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1435526495000,"hash":"9e8a30966fb7f2969706b18ce51bc60aca57c097"}